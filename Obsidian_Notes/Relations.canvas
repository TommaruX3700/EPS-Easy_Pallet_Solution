{
	"nodes":[
		{"type":"text","text":"# class Pack : 3D_object (.h)\n\n### Variabili:\n\n```cpp\nint packID\nbool rotatable\nbool palletizable\n```\n---\n### Metodi:\n```cpp\nPack()\nPack(float X, float Y, float Z, float WEIGHT, int CODE, bool ROT) {}\n~Pack()\nPack &operator=(const Pack &n) //override \"=\" to make a custom copy constructor\nPack &operator==(const Pack &n) //override \"==\" to confront two \"Pack\" objects\nvoid setRotatable(bool ROT)\nvoid setPackID(int CODE)\nint getPackID()\n```\n---\n### TODO:\n* I metodi sono tutti inerenti alle operazioni che vanno a modificare il singolo pacco, come modificarne le dimensioni, impostare le dimensioni, ruotare il pacco e così via. \n* Necessita di due costruttori separati per permettere l'uso nelle diverse situazioni;\n---\n### Documentazione: \nQuesto oggetto rappresenta il pacco e tutte le sue caratteristiche fisiche e operazioni che vi si possono effettuare.\nNotare come sia possibile effettuare operazioni tramite i normali operatori di C++ come il assegnazione diretta tra pacchi tramite \" = \" o di confronto tramite \" == \".\n","id":"a23529314695cae5","x":-1218,"y":-1990,"width":820,"height":860,"color":"4"},
		{"type":"text","text":"# Pack : 3D_object (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni Pack\n* andare a fare override delle funzioni \"SET\" di 3D_object x i pacchi","id":"da32a79df4db6eb0","x":-2040,"y":-1670,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# main (.cpp)\n\n### Variabili:\n```cpp\n3D \n```\n---\n### Metodi:\n```cpp\n~\n```\n---\n### TODO:\n* \n---\n### Documentazione: \n","id":"eba56724701065c2","x":-1813,"y":-4040,"width":740,"height":600,"color":"3"},
		{"type":"text","text":"# masterEPS (.h)\n\n### Variabili:\n```cpp\n3D \n```\n---\n### Metodi:\n```cpp\n~\n```\n---\n### TODO:\n* \n---\n### Documentazione: \n","id":"7d1de0e78f3fc347","x":-179,"y":-4040,"width":740,"height":600,"color":"4"},
		{"type":"text","text":"# (_virtual_) class 3D_object (.h)\n\n### Variabili:\n```cpp\n3D<float> objectDims\n3D<float> oldObject_Dims //evaluate\n3D<float> center\nfloat weight\nfloat density\n```\n---\n### Metodi:\n```cpp\n~3D_object() {}\nvoid setDims(float x, float y, float z)\nvoid setCenterCoords(dims)\nvoid setWeight(float kg)\nvoid setOrientation(int orientation)\nfloat getVolume()\nfloat getDensity()\n3D<float> out_dims getDims()\n```\n---\n### TODO:\n* dentro i metodi \"set\" posso andare a settare direttamente i valori in template tramite assegnazione \"=\", gli struct dovrebbero poter assegnarsi tranquillamente.\n---\n### Documentazione: \nClasse virtuale che definisce tutte le caratteristiche di un oggetto 3D del progetto, più metodi che fanno calcoli semplici e le basi dei metodi \"SET\".","id":"bcd9347dfc4e83a5","x":800,"y":-1990,"width":781,"height":840,"color":"4"},
		{"type":"text","text":"# Pallet (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni Pallet\n* andare a fare override di tutte le funzioni \"SET\" di 3D_object x i pallet","id":"f85fea1dcfbba0a3","x":-1055,"y":-890,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# PalletGroup (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni PalletGroup","id":"22601776f8ec70d0","x":-1022,"y":205,"width":597,"height":170,"color":"3"},
		{"type":"text","text":"# class Pallet : 3D_object (.h)\n\n### Variabili:\n```cpp\n//out of class\ntypedef Pack* ptrPack;\n\n//inside class\nprivate:\n\tfloat param_Efficency;\n\tstd::vector<ptrPack> pallet;\n```\n---\n### Metodi:\n```cpp\nPallet();\nPallet(float X, float Y, float Z);\n~Pallet();\n\nvoid add_Pack(ptrPack);\nvoid add_Pack(ptrPack, int vectorPosition = NULL);\nvoid remove_Pack(); //deletes the last one\nvoid remove_Pack(int vectorPosition = -1);\nint pack_Count(); //evaluate if necessary: look at <vector> methods\n```\n---\n### TODO:\n* valutare eventuale implementazione di override degli operatori C++ appositamente x i pallet\n* ricordarsi che Pallet eredita tutto 3D_object e che può sfruttare il template 3D dims\n---\n### Documentazione: \nAndando a ereditare tutte le variabili e metodi (da overriddare) dalla classe virtuale, Pallet.h ottiene già ereditate le dimensioni in quanto oggetto 3D e metodi utili per la successiva valutazione dello stesso/ottenimento di dati e info complessive varie.","id":"9a1e79440b7722be","x":-219,"y":-1210,"width":820,"height":860,"color":"4"},
		{"type":"text","text":"# class PalletGroup (.h)\n\n### Variabili:\n```cpp\n//out of class\ntypedef Pallet* ptrPallet;\n\n//inside class\nprivate:\n\tstd::vector<ptrPallet> palletGroup;\n\tint max = 0\n```\n---\n### Metodi:\n```cpp\nPalletGroup();\nPalletGroup(int max);\n~PalletGroup();\n\nvoid set_maximum(int a);\nint add_Pallet(ptrPallet);\nint add_Pallet(ptrPallet, int vectorPosition = -1);\nint remove_Pallet(); //deletes the last one\nint remove_Pallet(int vectorPosition = -1);\nint pallet_Count(); //evaluate if necessary: look at <vector> methods\n```\n---\n### TODO:\n* \n---\n### Documentazione: \nQuesta classe identifica un vettore di puntatori ad oggetti \"Pallet\" che si raggruppano e formano una serie di pallets pronti per essere esportati in output.","id":"32936dd609fc592f","x":-219,"y":-170,"width":820,"height":920,"color":"4"},
		{"type":"text","text":"# TODO: \n* Definire un include che permetta di definire tipi comuni come puntatori a pacchi ","id":"eeb82e86ddf8bd30","x":-1597,"y":-2679,"width":480,"height":327,"color":"2"},
		{"type":"text","text":"# Legenda:\n* le frecce di collegamento indicano una \"dipendenza\", ovvero (letteralmente) \"QUESTO file è incluso da QUESTO file\". questo per dare una mano a capire cazzo si sta includendo","id":"1649fbad8d1cf0f0","x":-1057,"y":-2679,"width":498,"height":327,"color":"1"},
		{"type":"text","text":"# Geometry (.h)\n\n### Variabili:\n\n```cpp\ntemplate<typename type>\nstruct 3D_coords { //type for 3D coordinates\n\ttype X, Y, Z;\n\t3D_coords() : X(type(0.0)), Y(type(0.0)), Z(type(0.0)) {}; //general constructor\n\t3D_coords(type x_val, type y_val, type z_val) : X(type(x_val)), Y(type(y_val)), Z(type(z_val)) {}; //specific constructor\n};\n\ntemplate<typename type>\nstruct 2D_coords { //type for 2D coordinates\n\ttype X, Y;\n\t2D_coords() : X(type(0)), Y(type(0)) {};\n\t2D_coords(type x_val, type y_val) : X(type(x_val)), Y(type(y_val)) {};\n};\n```\n\n---\n### Uso:\nRaggruppare sotto uno stesso template tutte le definizioni dei tipi usate nel progetto.\nInizialmente, genera un tipo generico (per permettere la creazione delle istanze virtuali), poi successivamente permette la creazione di struct sia di tipo float che di tipo int (o qualsiasi altro tipo, occhio) e la conseguente assegnazione alle variabili definite dalle classi figlie.","id":"341978063eeea840","x":-360,"y":-2832,"width":1080,"height":634,"color":"6"},
		{"type":"text","text":"# (_virtual_) 3D_object (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni TRANNE i \"SET\" (verranno definiti nella classe figlia)","id":"e4bc571b033bfe8e","x":892,"y":-1000,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"a6a92968dbf192ec","x":1782,"y":-1900,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# Cell (.h)\n\n```cpp\nstruct Cell {\n\t2D_coords<float> coords;\n\tbool isFree;\n\tPack* pack = nullptr;\n}\n```\n---\n### TODO:\n- [ ] valutare se rimuovere questo elemento e lavorare direttamente con matrici bidimensionali di puntatori a pacco dentro Plane.h, semplificando il progetto ed evitanto di creare 50k di oggetti cella a piano (considerando un pallet di 150cmX150cmX150cm, sono circa 22500 celle per un totale di 67,500 oggetti)\n---\n### Documentazione: \nDefinizione di singola cella.","id":"4581eeb8e87df3cf","x":1680,"y":-2795,"width":801,"height":559,"color":"5"},
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"1d11200d1f946bb6","x":2782,"y":-1900,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# class Grid (.h)\n\n### Variabili:\n```cpp\nprivate:\n\tplane XY, XZ, YZ;\n```\n---\n### Metodi:\n```cpp\npublic:\n\tGrid(int x, int y, int z);\n\t~Grid();\n```\n---\n### TODO:\n* \n---\n### Documentazione: \n","id":"020989c845b9390a","x":3780,"y":-2858,"width":740,"height":686,"color":"5"},
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"69cea4cc5281e303","x":3852,"y":-1900,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# class Plane (.h)\n\n### Variabili:\n```cpp\nprivate:\n\tint maxX, maxY;\n\tCell plane**;\n```\n---\n### Metodi:\n```cpp\npublic:\n\tPlane();\n\tPlane(int maxX, int maxY);\n\t\n\t~Plane();\n```\n---\n### TODO:\n- [ ] definire operazioni su celle (da usare poi direttamente da Grid)\n- [ ] \n---\n### Documentazione: \nPiano è definito da una singola matrice bidimensionale di variabili Struct Cell.","id":"a0494b72f9c94454","x":2680,"y":-2874,"width":801,"height":718,"color":"5"},
		{"id":"64fa64f057abbb4b","x":-1517,"y":-4723,"width":757,"height":483,"type":"text","text":""},
		{"id":"0a522b20fa4bdaea","x":-1073,"y":-5800,"width":1237,"height":609,"color":"2","type":"text","text":""}
	],
	"edges":[
		{"id":"af46391bfb818bdc","fromNode":"a23529314695cae5","fromSide":"left","toNode":"da32a79df4db6eb0","toSide":"right","color":"4"},
		{"id":"46e7c2b24c42fa5e","fromNode":"9a1e79440b7722be","fromSide":"bottom","toNode":"32936dd609fc592f","toSide":"top","color":"4"},
		{"id":"243ece5f1abae95b","fromNode":"9a1e79440b7722be","fromSide":"left","toNode":"f85fea1dcfbba0a3","toSide":"right","color":"4"},
		{"id":"6eb6fc57623e3119","fromNode":"341978063eeea840","fromSide":"bottom","toNode":"a23529314695cae5","toSide":"top","color":"6"},
		{"id":"ad00f52df725908d","fromNode":"341978063eeea840","fromSide":"bottom","toNode":"9a1e79440b7722be","toSide":"top","color":"6"},
		{"id":"1f11edcf19769a1d","fromNode":"341978063eeea840","fromSide":"bottom","toNode":"bcd9347dfc4e83a5","toSide":"top","color":"6"},
		{"id":"0e23c6dbc7510762","fromNode":"bcd9347dfc4e83a5","fromSide":"bottom","toNode":"e4bc571b033bfe8e","toSide":"top","color":"4"},
		{"id":"76fffe88c74a61ee","fromNode":"32936dd609fc592f","fromSide":"left","toNode":"22601776f8ec70d0","toSide":"right","color":"4"},
		{"id":"1d2ef9ae3dc0b43a","fromNode":"7d1de0e78f3fc347","fromSide":"left","toNode":"eba56724701065c2","toSide":"right","color":"4"},
		{"id":"a659a0815dd0e1fd","fromNode":"341978063eeea840","fromSide":"top","toNode":"7d1de0e78f3fc347","toSide":"bottom","color":"6"},
		{"id":"caf8a7dd8aa0e95c","fromNode":"a23529314695cae5","fromSide":"right","toNode":"9a1e79440b7722be","toSide":"left","color":"4"},
		{"id":"f981e9cc954815c6","fromNode":"341978063eeea840","fromSide":"right","toNode":"4581eeb8e87df3cf","toSide":"left","color":"6"},
		{"id":"c8fc18c8c763a5a1","fromNode":"4581eeb8e87df3cf","fromSide":"right","toNode":"a0494b72f9c94454","toSide":"left","color":"5"},
		{"id":"13c63cb62f693775","fromNode":"a0494b72f9c94454","fromSide":"right","toNode":"020989c845b9390a","toSide":"left","color":"5"},
		{"id":"0066fea577a5732b","fromNode":"a23529314695cae5","fromSide":"right","toNode":"4581eeb8e87df3cf","toSide":"left","color":"4"},
		{"id":"aaefb54709d282a4","fromNode":"4581eeb8e87df3cf","fromSide":"bottom","toNode":"a6a92968dbf192ec","toSide":"top","color":"5"},
		{"id":"05031e069ac2e329","fromNode":"a0494b72f9c94454","fromSide":"bottom","toNode":"1d11200d1f946bb6","toSide":"top","color":"5"},
		{"id":"637430d45d74084f","fromNode":"020989c845b9390a","fromSide":"bottom","toNode":"69cea4cc5281e303","toSide":"top","color":"5"},
		{"id":"70a3398df191149e","fromNode":"eba56724701065c2","fromSide":"top","toNode":"64fa64f057abbb4b","toSide":"bottom"},
		{"id":"d44b1943decb5b4f","fromNode":"64fa64f057abbb4b","fromSide":"top","toNode":"0a522b20fa4bdaea","toSide":"bottom"}
	]
}